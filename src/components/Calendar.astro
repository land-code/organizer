---
import { MonthSchema } from '@/schemas/DateSchema';

const { searchParams } = Astro.url;

const getDateBySearchParams = (searchParams: URLSearchParams) => {
  const rawMonth = searchParams.get('month');
  const rawYear = searchParams.get('year');

  if (!rawMonth || !rawYear) {
    return new Date();
  }

  const parsedDate = MonthSchema.safeParse({
    month: Number(rawMonth),
    year: Number(rawYear),
  });
  if (!parsedDate.success) {
    console.log(parsedDate.error.errors);
    throw new Error('Invalid date');
  }

  const { month, year } = parsedDate.data;

  return new Date(year, month - 1, 1);
};

const date = getDateBySearchParams(searchParams);

const year = date.getFullYear();
const month = date.getMonth();
const daysInMonth = new Date(year, month + 1, 0).getDate();

const getFirstDay = (year: number, month: number) => {
  const day = new Date(year, month, 1).getDay();
  return day === 0 ? 7 : day;
};

const firstDay = getFirstDay(year, month);

const prevMonth = new Date(year, month - 1, 1);
const nextMonth = new Date(year, month + 1, 1);

const getMonthName = (date: Date) => {
  return date.toLocaleDateString('default', {
    month: 'long',
    year: 'numeric',
  });
};

const today = new Date();
---

<div class="flex flex-wrap justify-between gap-4 py-4 items-center">
  <a
    href={`/?month=${prevMonth.getMonth() + 1}&year=${prevMonth.getFullYear()}`}
    class="text-xl"
  >
    {getMonthName(prevMonth)}
  </a>
  <h1 class="text-4xl">
    {getMonthName(date)}
  </h1>
  <a
    href={`/?month=${nextMonth.getMonth() + 1}&year=${nextMonth.getFullYear()}`}
    class="text-xl"
  >
    {getMonthName(nextMonth)}
  </a>
</div>
<div class="grid grid-cols-7 gap-4">
  {
    firstDay > 0 &&
      Array(firstDay - 1)
        .fill(null)
        .map((_, index) => {
          const day = new Date(year, month, 0).getDate() - index;
          return (
            <div class="day p-2 h-32 bg-zinc-700 rounded-xl">
              <header>
                <h1>{day}</h1>
              </header>
              <main>
                <ul />
              </main>
            </div>
          );
        })
        .reverse()
  }
  {
    Array(daysInMonth)
      .fill(null)
      .map((_, index) => {
        const day = index + 1;
        const isFirst = day === 1;

        const isToday =
          new Date(year, month, day).toDateString() === today.toDateString();
        return (
          <a
            href={`/${day}-${month + 1}-${year}`}
            class={`day p-2 h-32 overflow-auto scroll-p-8 bg-zinc-600 rounded-xl cursor-pointer hover:bg-zinc-500 ${isToday ? 'border-4 border-zinc-500' : ''}`}
            style={isFirst ? `grid-column-start: ${firstDay}` : ''}
            transition:name={`day-${day}`}
          >
            <header>
              <h1 class="pointer-events-none">{day}</h1>
            </header>
            <main>
              <ul>
                <li>Evento 1</li>
                <li>Evento 1</li>
                <li>Evento 1</li>
                <li>Evento 1</li>
                <li>Evento 1</li>
                <li>Evento 1</li>
                <li>Evento 1</li>
              </ul>
            </main>
          </a>
        );
      })
  }
  {
    Array(7 - ((firstDay + daysInMonth - 1) % 7))
      .fill(null)
      .map((_, index) => {
        const day = index + 1;
        return (
          <div class="day p-2 h-32 bg-zinc-700 rounded-xl">
            <header>
              <h1>{day}</h1>
            </header>
            <main>
              <ul />
            </main>
          </div>
        );
      })
  }
</div>
<style>
  /* width */
  .day::-webkit-scrollbar {
    width: 10px;
  }

  /* Track */
  .day::-webkit-scrollbar-track {
    background: #f1f1f1;
    @apply rounded-xl;
  }

  /* Handle */
  .day::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 5px;
  }

  /* Handle on hover */
  .day::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
</style>
