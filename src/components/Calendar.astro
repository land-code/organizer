---
import { MonthSchema } from '@/schemas/DateSchema';
import CalendarDay from './CalendarDay.astro';
import { supabase } from '@/db/client';
import { slide } from 'astro:transitions';
import type { TransitionDirectionalAnimations } from 'astro';

const { searchParams } = Astro.url;

const { data: eventsData } = await supabase
  .from('events')
  .select('event_date, title');

const getDateBySearchParams = (searchParams: URLSearchParams) => {
  const rawMonth = searchParams.get('month');
  const rawYear = searchParams.get('year');

  if (!rawMonth || !rawYear) {
    return new Date();
  }

  const parsedDate = MonthSchema.safeParse({
    month: Number(rawMonth),
    year: Number(rawYear),
  });
  if (!parsedDate.success) {
    console.log(parsedDate.error.errors);
    throw new Error('Invalid date');
  }

  const { month, year } = parsedDate.data;

  return new Date(year, month - 1, 1);
};

const date = getDateBySearchParams(searchParams);

const year = date.getFullYear();
const month = date.getMonth();
const daysInMonth = new Date(year, month + 1, 0).getDate();

const getFirstDay = (year: number, month: number) => {
  const day = new Date(year, month, 1).getDay();
  return day === 0 ? 7 : day;
};

const firstDay = getFirstDay(year, month);

const prevMonth = new Date(year, month - 1, 1);
const prevMonthYear = prevMonth.getFullYear();
const prevMonthMonth = prevMonth.getMonth();
const nextMonth = new Date(year, month + 1, 1);

const getMonthName = (date: Date) => {
  return date.toLocaleDateString('default', {
    month: 'long',
    year: 'numeric',
  });
};

const today = new Date();

const anim = {
  old: {
    name: 'slide',
    duration: '0.5s',
    direction: 'reversed',
    fillMode: 'forwards',
    easing: 'linear',
  },
  new: {
    name: 'slideOut',
    duration: '0.5s',
    direction: 'reversed',
    easing: 'linear',
    fillMode: 'forwards',
  },
};
const myFade = {
  forwards: anim,
  backwards: anim,
};
---

<style is:global>
  @keyframes slide {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0%);
    }
  }
  @keyframes slideOut {
    from {
      transform: translateX(0%);
    }
    to {
      transform: translateX(-100%);
    }
  }
</style>
<div class="flex flex-wrap justify-between gap-4 py-4 items-center">
  <a
    id="prev-month"
    href={`/?month=${prevMonth.getMonth() + 1}&year=${prevMonth.getFullYear()}`}
    class="text-xl"
  >
    {getMonthName(prevMonth)}
  </a>
  <h1 class="text-4xl">
    {getMonthName(date)}
  </h1>
  <a
    id="next-month"
    href={`/?month=${nextMonth.getMonth() + 1}&year=${nextMonth.getFullYear()}`}
    class="text-xl"
  >
    {getMonthName(nextMonth)}
  </a>
</div>
<div
  class="grid grid-cols-7 gap-4"
  transition:animate={myFade}
  transition:persist="persistent"
>
  {
    firstDay > 0 &&
      Array(firstDay - 1)
        .fill(null)
        .map((_, index) => {
          const day = new Date(year, month, 0).getDate() - index;
          return (
            <CalendarDay
              day={day}
              month={prevMonthMonth}
              year={prevMonthYear}
              events={eventsData}
              isOtherMonth
            />
          );
        })
        .reverse()
  }
  {
    Array(daysInMonth)
      .fill(null)
      .map((_, index) => (
        <CalendarDay
          day={index + 1}
          month={month}
          year={year}
          today={today}
          firstDay={firstDay}
          events={eventsData}
        />
      ))
  }
  {
    Array(7 - ((firstDay + daysInMonth - 1) % 7))
      .fill(null)
      .map((_, index) => {
        const day = new Date(year, month, 0).getDate() - index;
        return (
          <CalendarDay
            day={day}
            month={prevMonthMonth}
            year={prevMonthYear}
            events={eventsData}
            isOtherMonth
          />
        );
      })
  }
</div>
